{"version":3,"sources":["components/Titles.js","components/Form.js","components/Posters.js","App.js","components/Poster.js","components/Routes.js","serviceWorker.js","index.js"],"names":["Titles","Component","Form","props","onSubmit","getPosterData","type","name","placeholder","Posters","style","maxWidth","margin","images","map","image","to","pathname","id","state","imageId","imageURL","largeImageURL","quote","author","imageQuery","key","className","src","alt","tags","CHAVEE","App","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","setState","hits","console","log","this","Poster","posterImage","location","posterQuote","posterAuthor","posterColor","posterFont","posterFontSize","handleChangeQuote","handleChangeAuthor","handleChangeColor","handleChangeFont","handleChangeFontSize","handleClick","htmlToImage","toJpeg","document","getElementById","quality","then","dataUrl","link","createElement","download","href","click","color","fontFamily","fontSize","onChange","min","max","handleToggleBold","onClick","Routes","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6RAaeA,E,iLATX,OACE,6BACE,qCACA,iF,GALaC,aCSNC,EATF,SAAAC,GAAK,OAChB,0BAAMC,SAAUD,EAAME,eACpB,2BAAOC,KAAK,OAAOC,KAAK,QAAQC,YAAY,eAC5C,2BAAOF,KAAK,OAAOC,KAAK,SAASC,YAAY,WAC7C,2BAAOF,KAAK,OAAOC,KAAK,aAAaC,YAAY,qBACjD,oDCuBWC,EA3BC,SAAAN,GAAK,OACnB,yBAAKO,MAAO,CAACC,SAAU,SAAUC,OAAQ,WACvCT,EAAMU,OAAOC,KAAI,SAACC,GAClB,OACE,kBAAC,IAAD,CAAMC,GAAI,CACRC,SAAS,WAAD,OAAaF,EAAMG,IACzBC,MAAO,CACLC,QAASL,EAAMG,GACfG,SAAUN,EAAMO,cAChBC,MAAOpB,EAAMoB,MACbC,OAAQrB,EAAMqB,OACdC,WAAYtB,EAAMsB,cAGxB,yBAAKC,IAAKX,EAAMG,GAAIS,UAAU,iDAC5B,yBAAKA,UAAU,4BAA4BC,IAAKb,EAAMO,cAAeO,IAAMd,EAAMe,OACjF,yBAAKH,UAAU,oBACb,wBAAIA,UAAU,2BAA2BxB,EAAMoB,OAC9CpB,EAAMqB,QAAU,uBAAGG,UAAU,sEAAb,KAAqFxB,EAAMqB,gBCfhHO,G,MAAS,sCA2CAC,E,2MAxCbb,MAAQ,CACNN,OAAQ,GACRU,MAAO,GACPC,OAAQ,GACRC,WAAY,I,EAGhBpB,c,uCAAgB,WAAO4B,GAAP,uBAAAC,EAAA,6DACdD,EAAEE,iBACIV,EAAaQ,EAAEG,OAAOC,SAASZ,WAAWa,MAC1Cf,EAAQU,EAAEG,OAAOC,SAASd,MAAMe,MAChCd,EAASS,EAAEG,OAAOC,SAASb,OAAOc,MAJ1B,SAKSC,MAAM,gCAAD,OAAiCR,EAAjC,cAA6CN,EAA7C,uEALd,cAKRe,EALQ,gBAOKA,EAASC,OAPd,OAORC,EAPQ,OAQd,EAAKC,SACH,CAAE9B,OAAQ6B,EAAKE,KACbrB,MAAOA,EACPC,OAAQA,EACRC,WAAYA,IAGhBoB,QAAQC,IAAI,EAAK3B,MAAMN,QAfT,4C,8HAkBZ,OACE,yBAAKc,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMtB,cAAiB0C,KAAK1C,gBAC5B,kBAAC,EAAD,CACEQ,OAAUkC,KAAK5B,MAAMN,OACrBU,MAASwB,KAAK5B,MAAMI,MACpBC,OAAUuB,KAAK5B,MAAMK,OACrBC,WAAcsB,KAAK5B,MAAMM,kB,GAlCjBxB,a,iBCkGH+C,E,2MApGb7B,MAAQ,CACN8B,YAAa,EAAK9C,MAAM+C,SAAS/B,MAAME,SACvC8B,YAAa,EAAKhD,MAAM+C,SAAS/B,MAAMI,MACvC6B,aAAc,EAAKjD,MAAM+C,SAAS/B,MAAMK,OACxC6B,YAAa,GACbC,WAAY,GACZC,eAAgB,I,EAclBC,kBAAoB,SAACvB,GACnB,EAAKU,SAAS,CACZQ,YAAalB,EAAEG,OAAOE,S,EAI1BmB,mBAAqB,SAACxB,GACpB,EAAKU,SAAS,CACZS,aAAcnB,EAAEG,OAAOE,S,EAI3BoB,kBAAoB,SAACzB,GACnB,EAAKU,SAAS,CACZU,YAAapB,EAAEG,OAAOE,S,EAI1BqB,iBAAmB,SAAC1B,GAClB,EAAKU,SAAS,CACZW,WAAYrB,EAAEG,OAAOE,S,EAIzBsB,qBAAuB,SAAC3B,GACtB,EAAKU,SAAS,CACZY,eAAgBtB,EAAEG,OAAOE,S,EAK7BuB,YAAc,WACZC,IAAYC,OAAOC,SAASC,eAAe,WAAY,CAAEC,QAAS,MAC/DC,MAAK,SAAUC,GACd,IAAIC,EAAOL,SAASM,cAAc,KAClCD,EAAKE,SAAW,eAChBF,EAAKG,KAAOJ,EACZC,EAAKI,Y,mFA/CT,IAAMxB,EAAcF,KAAK5C,MAAM+C,SAAS/B,MAAME,SACxC8B,EAAcJ,KAAK5C,MAAM+C,SAAS/B,MAAMI,MACxC6B,EAAeL,KAAK5C,MAAM+C,SAAS/B,MAAMK,OAC/CuB,KAAKJ,SAAS,CACZM,YAAaA,EACbE,YAAaA,EACbC,aAAcA,M,+BA8ChB,OACE,yBAAK1C,MAAO,CAACC,SAAU,QAASC,OAAQ,WACtC,kBAAC,EAAD,MAEA,yBAAKM,GAAG,UAAUS,UAAU,qDAC1B,yBAAKA,UAAU,WAAWC,IAAKmB,KAAK5B,MAAM8B,cAC1C,yBAAKtB,UAAU,oBACb,wBAAIjB,MAAO,CAACgE,MAAO3B,KAAK5B,MAAMkC,YAAasB,WAAY5B,KAAK5B,MAAMmC,WAAYsB,SAAS,GAAD,OAAK7B,KAAK5B,MAAMoC,eAAhB,OAAqC5B,UAAU,2BAA2BoB,KAAK5B,MAAMgC,aAC1KJ,KAAK5B,MAAMiC,cAAgB,uBAAGzB,UAAU,sEAAb,KAAqFoB,KAAK5B,MAAMiC,gBAIhI,6BACE,2BAAO9C,KAAK,OAAOE,YAAY,QAAQ8B,MAAOS,KAAK5B,MAAMgC,YAAa0B,SAAU9B,KAAKS,oBACrF,2BAAOlD,KAAK,OAAOE,YAAY,SAAS8B,MAAOS,KAAK5B,MAAMiC,aAAcyB,SAAU9B,KAAKU,qBACvF,2BAAOnD,KAAK,QAAQuE,SAAU9B,KAAKW,oBACnC,2BAAOpD,KAAK,SAASwE,IAAI,KAAKC,IAAI,MAAMvE,YAAY,YAAYqE,SAAU9B,KAAKa,uBAE/E,2BAAOtD,KAAK,WAAWC,KAAK,OAAO+B,MAAM,OAAOuC,SAAU9B,KAAKiC,mBAE/D,4BAAQH,SAAU9B,KAAKY,kBACrB,4BAAQrB,MAAM,kBAAd,kBACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,UAAd,WAGF,4BAAQ2C,QAASlC,KAAKc,aAAtB,mBACA,kBAAC,IAAD,CAAM7C,GAAG,KACT,kD,GA9FWf,aCQNiF,EAPA,kBACb,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWpD,EAAKqD,OAAK,IACrC,kBAAC,IAAD,CAAOF,KAAK,cAAcC,UAAWpC,MCGvBsC,QACW,cAA7BC,OAAOrC,SAASsC,UAEe,UAA7BD,OAAOrC,SAASsC,UAEhBD,OAAOrC,SAASsC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAY3B,SAASC,eAAe,SD2H9C,kBAAmB2B,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.bd1e9ca9.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Titles extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Inspo</h1>\n        <p>Create inspirational posters for your quotes!</p>\n      </div>\n    );\n  }\n}\n\nexport default Titles;\n","import React from 'react';\n\nconst Form = props => (\n  <form onSubmit={props.getPosterData}>\n    <input type=\"text\" name=\"quote\" placeholder=\"your quote\"/>\n    <input type=\"text\" name=\"author\" placeholder=\"author\"/>\n    <input type=\"text\" name=\"imageQuery\" placeholder=\"background image\"/>\n    <button>Create Posters</button>\n  </form>\n);\n\nexport default Form;\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nconst Posters = props => (\n  <div style={{maxWidth: \"1000px\", margin: \"0 auto\"}}>\n  { props.images.map((image) => {\n    return (\n      <Link to={{\n        pathname: `/poster/${image.id}`,\n          state: {\n            imageId: image.id,\n            imageURL: image.largeImageURL,\n            quote: props.quote,\n            author: props.author,\n            imageQuery: props.imageQuery,\n          }\n      }}>\n      <div key={image.id} className=\"poster_card card bg-dark text-white rounded-0\">\n        <img className=\"poster_cardImage card-img\" src={image.largeImageURL} alt={ image.tags}/>\n        <div className=\"card-img-overlay\">\n          <h5 className=\"poster_quote card-title\">{props.quote}</h5>\n          {props.author && <p className=\"poster_author card-text font-weight-light font-italic align-middle\">- {props.author}</p>}\n        </div>\n      </div>\n      </Link>\n    );\n  }) }\n  </div>\n);\n\nexport default Posters;\n","import React, {Component} from 'react';\nimport Titles from './components/Titles';\nimport Form from './components/Form';\nimport Posters from './components/Posters';\nimport './App.css';\n\nconst CHAVEE = \"13589293-b0b688db565ac5817934945ed\";\n\nclass App extends Component {\n  state = {\n    images: [],\n    quote: \"\",\n    author: \"\",\n    imageQuery: \"\",\n  }\n\ngetPosterData = async (e) => {\n  e.preventDefault();\n  const imageQuery = e.target.elements.imageQuery.value;\n  const quote = e.target.elements.quote.value;\n  const author = e.target.elements.author.value;\n  const api_call = await fetch(`https://pixabay.com/api/?key=${CHAVEE}&q=${imageQuery}&image_type=photo&orientation=vertical&safesearch=true&per_page=30`);\n\n  const data = await api_call.json();\n  this.setState(\n    { images: data.hits,\n      quote: quote,\n      author: author,\n      imageQuery: imageQuery,\n    }\n  );\n  console.log(this.state.images);\n}\n  render() {\n    return(\n      <div className=\"App\">\n        <Titles />\n        <Form getPosterData = {this.getPosterData}/>\n        <Posters\n          images = {this.state.images}\n          quote = {this.state.quote}\n          author = {this.state.author}\n          imageQuery = {this.state.imageQuery}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, {Component} from 'react';\nimport Titles from './Titles';\nimport { Link } from \"react-router-dom\";\nimport htmlToImage from 'html-to-image';\n\nclass Poster extends Component {\n  state = {\n    posterImage: this.props.location.state.imageURL,\n    posterQuote: this.props.location.state.quote,\n    posterAuthor: this.props.location.state.author,\n    posterColor: \"\",\n    posterFont: \"\",\n    posterFontSize: \"\",\n  }\n\n  componentDidMount () {\n    const posterImage = this.props.location.state.imageURL;\n    const posterQuote = this.props.location.state.quote;\n    const posterAuthor = this.props.location.state.author;\n    this.setState({\n      posterImage: posterImage,\n      posterQuote: posterQuote,\n      posterAuthor: posterAuthor,\n    });\n  }\n\n  handleChangeQuote = (e) => {\n    this.setState({\n      posterQuote: e.target.value,\n    });\n  }\n\n  handleChangeAuthor = (e) => {\n    this.setState({\n      posterAuthor: e.target.value,\n    });\n  }\n\n  handleChangeColor = (e) => {\n    this.setState({\n      posterColor: e.target.value,\n    });\n  }\n\n  handleChangeFont = (e) => {\n    this.setState({\n      posterFont: e.target.value,\n    });\n  }\n\n  handleChangeFontSize = (e) => {\n    this.setState({\n      posterFontSize: e.target.value,\n    });\n  }\n\n\n  handleClick = () => {\n    htmlToImage.toJpeg(document.getElementById('capture'), { quality: 0.95 })\n      .then(function (dataUrl) {\n        var link = document.createElement('a');\n        link.download = 'myinspo.jpeg';\n        link.href = dataUrl;\n        link.click();\n      });\n  }\n\n  render() {\n    return(\n      <div style={{maxWidth: \"390px\", margin: \"0 auto\"}}>\n        <Titles />\n\n        <div id=\"capture\" className=\"ind_Poster_card card bg-dark text-white rounded-0\">\n          <img className=\"card-img\" src={this.state.posterImage}/>\n          <div className=\"card-img-overlay\">\n            <h5 style={{color: this.state.posterColor, fontFamily: this.state.posterFont, fontSize: `${this.state.posterFontSize}px`}} className=\"poster_quote card-title\">{this.state.posterQuote}</h5>\n            {this.state.posterAuthor && <p className=\"poster_author card-text font-weight-light font-italic align-middle\">- {this.state.posterAuthor}</p>}\n          </div>\n        </div>\n\n        <div>\n          <input type=\"text\" placeholder=\"Quote\" value={this.state.posterQuote} onChange={this.handleChangeQuote} />\n          <input type=\"text\" placeholder=\"Author\" value={this.state.posterAuthor} onChange={this.handleChangeAuthor} />\n          <input type=\"color\" onChange={this.handleChangeColor}/>\n          <input type=\"number\" min=\"20\" max=\"100\" placeholder=\"Font Size\" onChange={this.handleChangeFontSize}/>\n\n          <input type=\"checkbox\" name=\"Bold\" value=\"Bold\" onChange={this.handleToggleBold}/>\n\n          <select onChange={this.handleChangeFont}>\n            <option value=\"Helvetica Neue\">Helvetica Neue</option>\n            <option value=\"Sans-Serif\">Sans-serif</option>\n            <option value=\"Monospace\">Monospace</option>\n            <option value=\"Cursive\">Cursive</option>\n            <option value=\"Fantasy\">Fantasy</option>\n            <option value=\"Roboto\">Roboto</option>\n          </select>\n\n          <button onClick={this.handleClick}>Download Poster</button>\n          <Link to=\"/\">\n          <button >Go Back</button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n};\nexport default Poster;\n","import React from 'react';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n\nimport App from \"../App\";\nimport Poster from \"./Poster\";\n\nconst Routes = () => (\n  <Router>\n      <Route path=\"/\" component={App} exact />\n      <Route path=\"/poster/:id\" component={Poster} />\n  </Router>\n);\n\nexport default Routes;\n\n// Apply exact on the top most component will mean that it is only going to render out the App componenet when the path is exactly rhe forward slash.\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Routes from './components/Routes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}