{"version":3,"sources":["components/Titles.js","components/Form.js","components/Posters.js","App.js","components/Poster.js","components/Routes.js","serviceWorker.js","index.js"],"names":["Titles","Component","Form","props","onSubmit","getPosterData","type","name","placeholder","value","Posters","style","maxWidth","margin","images","map","image","to","pathname","id","state","largeImageURL","quote","author","key","className","src","alt","tags","color","fontFamily","font","CHAVEE","process","REACT_APP_API_KEY","App","e","a","preventDefault","target","elements","fetch","api_call","json","data","setState","hits","console","log","this","Poster","posterImage","location","posterQuote","posterAuthor","handleChangeQuote","handleChangeAuthor","onChange","Routes","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8a97fd90.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Titles extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Inspo</h1>\n        <p>Create inspirational posters for your quotes!</p>\n      </div>\n    );\n  }\n}\n\nexport default Titles;\n","import React from 'react';\n\nconst Form = props => (\n  <form onSubmit={props.getPosterData}>\n    <input type=\"text\" name=\"quote\" placeholder=\"your quote\"/>\n    <input type=\"text\" name=\"author\" placeholder=\"author\"/>\n    <select name=\"font\">\n      <option value=\"Helvetica Neue\">Helvetica Neue</option>\n      <option value=\"Sans-Serif\">Sans-serif</option>\n      <option value=\"Monospace\">Monospace</option>\n      <option value=\"Cursive\">Cursive</option>\n      <option value=\"Fantasy\">Fantasy</option>\n      <option value=\"Roboto\">Roboto</option>\n    </select>\n    <input type=\"color\" name=\"color\" />\n    <input type=\"text\" name=\"image\" placeholder=\"background image\"/>\n    <button>Create Posters</button>\n  </form>\n);\n\nexport default Form;\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nconst Posters = props => (\n  <div style={{maxWidth: \"1000px\", margin: \"0 auto\"}}>\n  { props.images.map((image) => {\n    return (\n      <Link to={{\n        pathname: `/poster/${image.id}`,\n          state: {\n            image: image.largeImageURL,\n            quote: props.quote,\n            author: props.author\n          }\n      }}>\n      <div key={image.id} className=\"poster_card card bg-dark text-white rounded-0\">\n        <img className=\"poster_cardImage card-img\" src={image.largeImageURL} alt={ image.tags}/>\n        <div className=\"card-img-overlay\">\n          <h5 style={{color: props.color, fontFamily: props.font }} className=\"poster_quote card-title\">{props.quote}</h5>\n          {props.author && <p className=\"poster_author card-text font-weight-light font-italic align-middle\">- {props.author}</p>}\n        </div>\n      </div>\n      </Link>\n    );\n  }) }\n  </div>\n);\n\nexport default Posters;\n","import React, {Component} from 'react';\nimport Titles from './components/Titles';\nimport Form from './components/Form';\nimport Posters from './components/Posters';\nimport './App.css';\n\nconst CHAVEE = process.env.REACT_APP_API_KEY;\n\nclass App extends Component {\n  state = {\n    images: [],\n    quote: \"\",\n    author: \"\",\n    font: \"\",\n    color: \"\"\n  }\n\ngetPosterData = async (e) => {\n  e.preventDefault();\n  const image = e.target.elements.image.value;\n  const quote = e.target.elements.quote.value;\n  const author = e.target.elements.author.value;\n  const font = e.target.elements.font.value;\n  const color = e.target.elements.color.value;\n  const api_call = await fetch(`https://pixabay.com/api/?key=${CHAVEE}&q=${image}&image_type=photo&orientation=vertical&safesearch=true`);\n\n  const data = await api_call.json();\n  this.setState(\n    { images: data.hits,\n      quote: quote,\n      author: author,\n      font: font,\n      color: color\n    }\n  );\n  console.log(this.state.images);\n}\n\n\n  render() {\n    return(\n      <div className=\"App\">\n        <Titles />\n        <Form getPosterData = {this.getPosterData}/>\n        <Posters\n          images = {this.state.images}\n          quote = {this.state.quote}\n          author = {this.state.author}\n          font = {this.state.font}\n          color = {this.state.color}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, {Component} from 'react';\n\nconst CHAVEE = process.env.REACT_APP_CHAVEE;\n\nclass Poster extends Component {\n  state = {\n    posterImage: this.props.location.state.image,\n    posterQuote: this.props.location.state.quote,\n    posterAuthor: this.props.location.state.author,\n  }\n\n  handleChangeQuote = (e) => {\n    this.setState({\n      posterQuote: e.target.value,\n    });\n  }\n\n  handleChangeAuthor = (e) => {\n    this.setState({\n      posterAuthor: e.target.value,\n    });\n  }\n\n  render() {\n    return(\n      <div style={{maxWidth: \"390px\", margin: \"0 auto\"}}>\n        <div className=\"ind_Poster_card card bg-dark text-white rounded-0\">\n          <img className=\"card-img\" src={this.state.posterImage}/>\n          <div className=\"card-img-overlay\">\n            <h5 className=\"poster_quote card-title\">{this.state.posterQuote}</h5>\n            {this.state.posterAuthor && <p className=\"poster_author card-text font-weight-light font-italic align-middle\">- {this.state.posterAuthor}</p>}\n          </div>\n        </div>\n\n        <div>\n          <input type=\"text\" placeholder=\"Quote\" value={this.state.posterQuote} onChange={this.handleChangeQuote} />\n          <input type=\"text\" placeholder=\"Author\" value={this.state.posterAuthor} onChange={this.handleChangeAuthor} />\n          <input type=\"color\" />\n        </div>\n      </div>\n    );\n  }\n};\nexport default Poster;\n","import React from 'react';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n\nimport App from \"../App\";\nimport Poster from \"./Poster\";\n\nconst Routes = () => (\n  <Router>\n      <Route path=\"/\" component={App} exact />\n      <Route path=\"/poster/:id\" component={Poster} />\n  </Router>\n);\n\nexport default Routes;\n\n// Apply exact on the top most component will mean that it is only going to render out the App componenet when the path is exactly rhe forward slash.\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Routes from './components/Routes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}